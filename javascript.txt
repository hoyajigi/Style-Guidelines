모르겠다. 한글로 작성하자
오늘은 2013년 2월 3일
읽기 좋은 자바스크립트 코딩 기법이라는 책을 참고하였음

PART 1 스타일 가이드라인
jslint와 jshint를 잘 참고하자
01장 기본최신버젼은 비쥬얼 스튜디오가 만들어 주는 것이 갑이다.

i18n/l10n관련
/lang/resource 폴더 관례를 따른다. 포맷
__1.1 들여쓰기 
        공백2개
        http://sproutcore.com/
__1.2 문장 종료 
        무조건 세미콜론
__1.3 줄 길이 
무제한
__1.4 줄 바꿈 
하지 않는다
__1.5 빈 줄 넣기 
메서드 사이
메서드 내 지역 변수와 첫번째 문장 사이
한줄 또는 여러줄 주석 전
가독성을 높이기 위해 메서드 내에서 논리적으로 구분되는 곳
__1.6 이름 규칙 
____1.6.1 변수와 함수 
낙타표기법
함수명과 메서드명의 첫번째 단어는 동사로 시작한다. get, can, has, is, set
____1.6.2 상수 
대문자로 쓰고 단어사이에 언더바
____1.6.3 생성자 
파스칼 표기법
__1.7 리터럴 값 
____1.7.1 문자열
큰 따옴표 
____1.7.2 숫자 
십진수, 소수점 앞 뒤 모두 숫자가 있어야 한다.
____1.7.3 null 
*null은 위험하다
null값이 사용되는 곳
나중에 값을 할당할 변수를 초기화 할 떄
선언한 변수에 값이 할당 되었는지 비교할 때
인자 값으로 객체(object)를 넘기는 함수를 호출할 때
함수를 호출한 곳에서 반환값으로 객체(object)를 기대할 때
null을 사용하면 안되는 경우
함수의 인자 값을 확인하기 위해 null로 비교해서는 안된다.
초기화되지 않은 변수를 null로 비교해서는 안된다.
____1.7.4 undefined 
무조건 선언적으로 var를 쓰면 undefined를 쓸 이유가 없다.
____1.7.5 객체 리터럴 
// 권장하지 않음
var book = new Object();
book.title = "Maintainable JavaScript";
book.author = "Nicholas C. Zakas";

// 권장하는 방법
var book = {
  title: "Maintainable JavaScript",
  author: "Nicholas C. Zakas"
};
____1.7.6 배열 리터럴 
// 권장하지 않음
var colors = new Array("red", "green", "blue");
var numbers = new Array(1, 2, 3, 4);

//권장하는 방법
var colors = [ "red", "green", "blue"  ];
var numbers = [ 1, 2, 3, 4 ];


02장 주석
__2.1 한 줄 주석 
꼬리주석은 쓰지 않는다.
코드를 주석처리할 때 쓸 수 있다.
// 뒤에 한줄 띈다.
__2.1.5 주석 어노테이션
TODO: 다음에 작업할 내용
HACK: 임시변통, 왜 사용했는지 필요
XXX: 코드에 문제가 있어 가능한 빨리 수정해야 함을 의미합니다.
FIXME: 코드에 문제가 있어 곧 수정해야 함을 의미합니다. XXX보다는 덜 중요합니다.
REVIEW: 변경 가능성이 있어 리뷰가 필요한 코드를 의미합니다.

__2.2 여러 줄 주석 
자바스타일 여러 줄 주석 시르다.
__2.3 주석 쓰기 
명백한 내용에 대해서는 주석을 달지 않는다.
____2.3.1 이해하기 어려운 코드 
____2.3.2 오해하기 쉬운 코드 
____2.3.3 특정 브라우저 핵 
은 되도록 쓰지 않도록 하지만 필요하다면 표시 해 둔다.
__2.4 문서화 주석 
YUIDoc과 JSDoc이 있다.
JSDoc을 사용하면 적극 권장한다.

03장 문장과 표현식 
__3.1 중괄호 넣기 
무조건 중괄호를 넣고 다음과 같다.
if ( condition ) {
  doSomething();
}
__3.2 복합문에서의 공백

__3.3 switch 문 
switch ( condition ) {
  case "first":
    //code
    break;

  case "second":
    //code
   break;

  default:// no default
    //code
}

__3.4 with 문 
은 사용하지 않는다.

__3.5 for 반복문 
__3.6 for...in 반복문 
var prop;

for (prop in object) {
  if (object.hasOwnProperty(prop)) {
    //....
  }
}

04장 변수, 함수, 연산자
__4.1 변수 선언 
하나의 var으로 함수에 처음에 선언한다.

__4.2 함수 선언 
__4.3 함수 호출문에 공백 넣기 
함수를 호출할 때 는 공백을 넣지 않는다.
doSomething(item);
__4.4 함수 선언하고 바로 호출하기 
익명함수를 대입하는 것이 아니라 바로 호출하는 것임을 명확하게 보이기 위해 괄호를 넣는다.
var value = (function () {
  //....
}());
____4.4.1 strict 모드 
전역 strict모드를 사용하지 않고 함수마다 선언한다.

__4.5 동등 연산자 
==과 !=는 타입변환이 일어나므로 ===과 !==을 사용한다.
(예외: 0, 빈문자열, null, undefined)
__4.6 eval()
은 사용하지 않는다.
__4.7 기본 래퍼 타입 

PART 2 프로그래밍 프랙티스
05장 UI 레이어 느슨하게 연결하기
__5.1 느슨한 연결이란?
__5.2 CSS에서 자바스크립트 분리하기 
__5.3 자바스크립트에서 CSS 분리하기
css클래스를 만들고 자바스크립트는 클래스만 변경한다.
 
__5.4 HTML에서 자바스크립트 분리하기 
addeventlistener (IE8 이하 Legacy 지원 필요)

__5.5 자바스크립트에서 HTML 분리하기 
____5.5.1 방법 1. 서버에서 가져오기 
싫어
____5.5.2 방법 2. 간단한 클라이언트 사이드 템플릿 
싫어
____5.5.2 방법 3. 복잡한 클라이언트 사이드 템플릿 
싫어

06장 전역 선언 방지
__6.1 전역의 문제점 
____6.1.1 이름 충돌 문제 
____6.1.2 변경에 취약한 문제 
____6.1.3 테스트하기 어려워지는 문제 
__6.2 실수에 의한 전역 선언 
____6.2.1 실수를 방지하는 방법 
__6.3 One-Global 접근법 
____6.3.1 네임스페이스 
____6.3.2 모듈 
__6.4 Zero-Global 접근법 

07장 이벤트 처리 
__7.1 고전적인 방법 
__7.2 규칙 1. 애플리케이션 로직을 분리한다 
__7.3 규칙 2. 이벤트 객체를 바로 전달하지 않는다 

08장 null 비교 금지
__8.1 기본 데이터 타입 알아내기 
typeof
__8.2 객체 참조 타입 알아내기
instanceof 
____8.2.1 함수 알아내기 
____8.2.2 배열 알아내기 
__8.3 프로퍼티 알아내기 
in

09장 코드에서 구성 데이터 분리하기
__9.1 구성 데이터란? 
URL, 문자열, 고유한 값, 설정 값, 변경 될 수 있는 값
__9.2 구성 데이터 분리하기 
config객체
__9.3 구성 데이터 저장하기 
JSON, JSONP, java property file
Props2JS

10장 사용자 에러 던지기
throw new Error("어디서 어떻게 에러가 났어요");


11장 객체의 변경 권한
__11.1 변경 권한이 있는 객체란? 
__11.2 객체 변경 금지 규칙 
____11.2.1 메서드 오버라이드 금지 
____11.2.2 새로운 메서드 추가 금지 
____11.2.3 메서드 삭제 금지 
__11.3 더 나은 접근법 
____11.3.1 객체 기반 상속 
____11.3.2 타입 기반 상속 
____11.3.3 퍼사드 패턴 
__11.4 폴리필이란? 
__11.5 객체 변경을 방지하는 방법 
preventExtension
seal
freeze

12장 브라우저 탐지
__12.1 사용자 에이전트 탐지 
하지마세요
__12.2 기능 탐지 
__12.3 기능 추론 금지 
__12.4 브라우저 추론 금지 
__12.5 무엇을 사용해야 할까? 

PART 3 자동화
13장 파일과 디렉터리 구조
__13.1 좋은 습관 
파일당 객체 하나
관련된 파일끼리 디렉터리에 넣기
서드파티 코드는 별도로 관리하기
빌드 경로 정하기
테스트 코드를 가까이 두기
__13.2 기본 디렉터리 구조
build
src  //src/core
test  //src와 구조가 같게
 

유효성 검사>문서화->파일 합치기와 굽기(빌드 날짜와 버젼 저작권정보 넣기), 줄바꿈 주의->최소화와 압축->(build 폴더 비우거나 만들기)->테스트

개발 빌드 와 릴리즈 빌드 나누기
CI 시스템 사용하기 jenkins, Continuum, Buildbot, cruise control, gradle


APPENDIX B 자바스크립트 툴
__B.1 빌드 툴 
Ant, Buildy, Gmake, Grunt, Jammit, Jasy, Rake, Sprockets
__B.2 문서 생성기 
Docco, Dojo  Documentation Tool, JoDoc, JSDoc toolkit, Natural Docs, NDoc, PDoc, YUI Doc,
__B.3 린트 툴 
JSLint, JSHint
__B.4 최소화 툴 
Closure Compiler
구글에서 만든 자바 기반 자바스크립트 최소화 툴
UglifyJS
Node.js 기반 자바스크립트 최소화 툴
YUI Compressor
자바 기반 자바스크립트와 CSS 최소화 툴
__B.5 테스트 툴
Jasmine
JSTestDriver
PhantomJS
QUnit
Selenium
Yeti
YUI Test